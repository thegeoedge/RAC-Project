package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NextserviceinstructionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextserviceinstructionsAllPropertiesEquals(Nextserviceinstructions expected, Nextserviceinstructions actual) {
        assertNextserviceinstructionsAutoGeneratedPropertiesEquals(expected, actual);
        assertNextserviceinstructionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextserviceinstructionsAllUpdatablePropertiesEquals(
        Nextserviceinstructions expected,
        Nextserviceinstructions actual
    ) {
        assertNextserviceinstructionsUpdatableFieldsEquals(expected, actual);
        assertNextserviceinstructionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextserviceinstructionsAutoGeneratedPropertiesEquals(
        Nextserviceinstructions expected,
        Nextserviceinstructions actual
    ) {
        assertThat(expected)
            .as("Verify Nextserviceinstructions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextserviceinstructionsUpdatableFieldsEquals(
        Nextserviceinstructions expected,
        Nextserviceinstructions actual
    ) {
        assertThat(expected)
            .as("Verify Nextserviceinstructions relevant properties")
            .satisfies(e -> assertThat(e.getJobid()).as("check jobid").isEqualTo(actual.getJobid()))
            .satisfies(e -> assertThat(e.getInstruction()).as("check instruction").isEqualTo(actual.getInstruction()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getIgnore()).as("check ignore").isEqualTo(actual.getIgnore()))
            .satisfies(e -> assertThat(e.getVehicleid()).as("check vehicleid").isEqualTo(actual.getVehicleid()))
            .satisfies(e -> assertThat(e.getVehicleno()).as("check vehicleno").isEqualTo(actual.getVehicleno()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextserviceinstructionsUpdatableRelationshipsEquals(
        Nextserviceinstructions expected,
        Nextserviceinstructions actual
    ) {}
}
