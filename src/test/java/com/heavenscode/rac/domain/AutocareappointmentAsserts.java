package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AutocareappointmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocareappointmentAllPropertiesEquals(Autocareappointment expected, Autocareappointment actual) {
        assertAutocareappointmentAutoGeneratedPropertiesEquals(expected, actual);
        assertAutocareappointmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocareappointmentAllUpdatablePropertiesEquals(Autocareappointment expected, Autocareappointment actual) {
        assertAutocareappointmentUpdatableFieldsEquals(expected, actual);
        assertAutocareappointmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocareappointmentAutoGeneratedPropertiesEquals(Autocareappointment expected, Autocareappointment actual) {
        assertThat(expected)
            .as("Verify Autocareappointment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocareappointmentUpdatableFieldsEquals(Autocareappointment expected, Autocareappointment actual) {
        assertThat(expected)
            .as("Verify Autocareappointment relevant properties")
            .satisfies(e -> assertThat(e.getAppointmenttype()).as("check appointmenttype").isEqualTo(actual.getAppointmenttype()))
            .satisfies(e -> assertThat(e.getAppointmentdate()).as("check appointmentdate").isEqualTo(actual.getAppointmentdate()))
            .satisfies(e -> assertThat(e.getAddeddate()).as("check addeddate").isEqualTo(actual.getAddeddate()))
            .satisfies(e -> assertThat(e.getConformdate()).as("check conformdate").isEqualTo(actual.getConformdate()))
            .satisfies(e -> assertThat(e.getAppointmentnumber()).as("check appointmentnumber").isEqualTo(actual.getAppointmentnumber()))
            .satisfies(e -> assertThat(e.getVehiclenumber()).as("check vehiclenumber").isEqualTo(actual.getVehiclenumber()))
            .satisfies(e -> assertThat(e.getAppointmenttime()).as("check appointmenttime").isEqualTo(actual.getAppointmenttime()))
            .satisfies(e -> assertThat(e.getIsconformed()).as("check isconformed").isEqualTo(actual.getIsconformed()))
            .satisfies(e -> assertThat(e.getConformedby()).as("check conformedby").isEqualTo(actual.getConformedby()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getContactnumber()).as("check contactnumber").isEqualTo(actual.getContactnumber()))
            .satisfies(e -> assertThat(e.getCustomername()).as("check customername").isEqualTo(actual.getCustomername()))
            .satisfies(e -> assertThat(e.getIssued()).as("check issued").isEqualTo(actual.getIssued()))
            .satisfies(e -> assertThat(e.getHoistid()).as("check hoistid").isEqualTo(actual.getHoistid()))
            .satisfies(e -> assertThat(e.getIsarrived()).as("check isarrived").isEqualTo(actual.getIsarrived()))
            .satisfies(e -> assertThat(e.getIscancel()).as("check iscancel").isEqualTo(actual.getIscancel()))
            .satisfies(e -> assertThat(e.getIsnoanswer()).as("check isnoanswer").isEqualTo(actual.getIsnoanswer()))
            .satisfies(e ->
                assertThat(e.getMissedappointmentcall()).as("check missedappointmentcall").isEqualTo(actual.getMissedappointmentcall())
            )
            .satisfies(e -> assertThat(e.getCustomermobileid()).as("check customermobileid").isEqualTo(actual.getCustomermobileid()))
            .satisfies(e ->
                assertThat(e.getCustomermobilevehicleid())
                    .as("check customermobilevehicleid")
                    .isEqualTo(actual.getCustomermobilevehicleid())
            )
            .satisfies(e -> assertThat(e.getVehicleid()).as("check vehicleid").isEqualTo(actual.getVehicleid()))
            .satisfies(e ->
                assertThat(e.getIsmobileappointment()).as("check ismobileappointment").isEqualTo(actual.getIsmobileappointment())
            )
            .satisfies(e -> assertThat(e.getAdvancepayment()).as("check advancepayment").isEqualTo(actual.getAdvancepayment()))
            .satisfies(e -> assertThat(e.getJobid()).as("check jobid").isEqualTo(actual.getJobid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocareappointmentUpdatableRelationshipsEquals(Autocareappointment expected, Autocareappointment actual) {
        // empty method
    }
}
