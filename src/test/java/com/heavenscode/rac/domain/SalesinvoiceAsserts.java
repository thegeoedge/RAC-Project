package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SalesinvoiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesinvoiceAllPropertiesEquals(Salesinvoice expected, Salesinvoice actual) {
        assertSalesinvoiceAutoGeneratedPropertiesEquals(expected, actual);
        assertSalesinvoiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesinvoiceAllUpdatablePropertiesEquals(Salesinvoice expected, Salesinvoice actual) {
        assertSalesinvoiceUpdatableFieldsEquals(expected, actual);
        assertSalesinvoiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesinvoiceAutoGeneratedPropertiesEquals(Salesinvoice expected, Salesinvoice actual) {
        assertThat(expected)
            .as("Verify Salesinvoice auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesinvoiceUpdatableFieldsEquals(Salesinvoice expected, Salesinvoice actual) {
        assertThat(expected)
            .as("Verify Salesinvoice relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getInvoicedate()).as("check invoicedate").isEqualTo(actual.getInvoicedate()))
            .satisfies(e -> assertThat(e.getCreateddate()).as("check createddate").isEqualTo(actual.getCreateddate()))
            .satisfies(e -> assertThat(e.getQuoteid()).as("check quoteid").isEqualTo(actual.getQuoteid()))
            .satisfies(e -> assertThat(e.getOrderid()).as("check orderid").isEqualTo(actual.getOrderid()))
            .satisfies(e -> assertThat(e.getDelieverydate()).as("check delieverydate").isEqualTo(actual.getDelieverydate()))
            .satisfies(e -> assertThat(e.getSalesrepid()).as("check salesrepid").isEqualTo(actual.getSalesrepid()))
            .satisfies(e -> assertThat(e.getSalesrepname()).as("check salesrepname").isEqualTo(actual.getSalesrepname()))
            .satisfies(e -> assertThat(e.getDelieverfrom()).as("check delieverfrom").isEqualTo(actual.getDelieverfrom()))
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getCustomername()).as("check customername").isEqualTo(actual.getCustomername()))
            .satisfies(e -> assertThat(e.getCustomeraddress()).as("check customeraddress").isEqualTo(actual.getCustomeraddress()))
            .satisfies(e -> assertThat(e.getDeliveryaddress()).as("check deliveryaddress").isEqualTo(actual.getDeliveryaddress()))
            .satisfies(e -> assertThat(e.getSubtotal()).as("check subtotal").isEqualTo(actual.getSubtotal()))
            .satisfies(e -> assertThat(e.getTotaltax()).as("check totaltax").isEqualTo(actual.getTotaltax()))
            .satisfies(e -> assertThat(e.getTotaldiscount()).as("check totaldiscount").isEqualTo(actual.getTotaldiscount()))
            .satisfies(e -> assertThat(e.getNettotal()).as("check nettotal").isEqualTo(actual.getNettotal()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getPaidamount()).as("check paidamount").isEqualTo(actual.getPaidamount()))
            .satisfies(e -> assertThat(e.getAmountowing()).as("check amountowing").isEqualTo(actual.getAmountowing()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getLocationid()).as("check locationid").isEqualTo(actual.getLocationid()))
            .satisfies(e -> assertThat(e.getLocationcode()).as("check locationcode").isEqualTo(actual.getLocationcode()))
            .satisfies(e -> assertThat(e.getReferencecode()).as("check referencecode").isEqualTo(actual.getReferencecode()))
            .satisfies(e -> assertThat(e.getCreatedbyid()).as("check createdbyid").isEqualTo(actual.getCreatedbyid()))
            .satisfies(e -> assertThat(e.getCreatedbyname()).as("check createdbyname").isEqualTo(actual.getCreatedbyname()))
            .satisfies(e -> assertThat(e.getAutocarecharges()).as("check autocarecharges").isEqualTo(actual.getAutocarecharges()))
            .satisfies(e -> assertThat(e.getAutocarejobid()).as("check autocarejobid").isEqualTo(actual.getAutocarejobid()))
            .satisfies(e -> assertThat(e.getVehicleno()).as("check vehicleno").isEqualTo(actual.getVehicleno()))
            .satisfies(e -> assertThat(e.getNextmeter()).as("check nextmeter").isEqualTo(actual.getNextmeter()))
            .satisfies(e -> assertThat(e.getCurrentmeter()).as("check currentmeter").isEqualTo(actual.getCurrentmeter()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getHasdummybill()).as("check hasdummybill").isEqualTo(actual.getHasdummybill()))
            .satisfies(e -> assertThat(e.getDummybillid()).as("check dummybillid").isEqualTo(actual.getDummybillid()))
            .satisfies(e -> assertThat(e.getDummybillamount()).as("check dummybillamount").isEqualTo(actual.getDummybillamount()))
            .satisfies(e -> assertThat(e.getDummycommision()).as("check dummycommision").isEqualTo(actual.getDummycommision()))
            .satisfies(e -> assertThat(e.getIsserviceinvoice()).as("check isserviceinvoice").isEqualTo(actual.getIsserviceinvoice()))
            .satisfies(e -> assertThat(e.getNbtamount()).as("check nbtamount").isEqualTo(actual.getNbtamount()))
            .satisfies(e -> assertThat(e.getVatamount()).as("check vatamount").isEqualTo(actual.getVatamount()))
            .satisfies(e -> assertThat(e.getAutocarecompanyid()).as("check autocarecompanyid").isEqualTo(actual.getAutocarecompanyid()))
            .satisfies(e -> assertThat(e.getIscompanyinvoice()).as("check iscompanyinvoice").isEqualTo(actual.getIscompanyinvoice()))
            .satisfies(e -> assertThat(e.getInvcanceldate()).as("check invcanceldate").isEqualTo(actual.getInvcanceldate()))
            .satisfies(e -> assertThat(e.getInvcancelby()).as("check invcancelby").isEqualTo(actual.getInvcancelby()))
            .satisfies(e -> assertThat(e.getIsvatinvoice()).as("check isvatinvoice").isEqualTo(actual.getIsvatinvoice()))
            .satisfies(e -> assertThat(e.getPaymenttype()).as("check paymenttype").isEqualTo(actual.getPaymenttype()))
            .satisfies(e -> assertThat(e.getPendingamount()).as("check pendingamount").isEqualTo(actual.getPendingamount()))
            .satisfies(e -> assertThat(e.getAdvancepayment()).as("check advancepayment").isEqualTo(actual.getAdvancepayment()))
            .satisfies(e -> assertThat(e.getDiscountcode()).as("check discountcode").isEqualTo(actual.getDiscountcode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesinvoiceUpdatableRelationshipsEquals(Salesinvoice expected, Salesinvoice actual) {}
}
