package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAllPropertiesEquals(Customer expected, Customer actual) {
        assertCustomerAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAllUpdatablePropertiesEquals(Customer expected, Customer actual) {
        assertCustomerUpdatableFieldsEquals(expected, actual);
        assertCustomerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAutoGeneratedPropertiesEquals(Customer expected, Customer actual) {
        assertThat(expected)
            .as("Verify Customer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerUpdatableFieldsEquals(Customer expected, Customer actual) {
        assertThat(expected)
            .as("Verify Customer relevant properties")
            .satisfies(e -> assertThat(e.getCustomertype()).as("check customertype").isEqualTo(actual.getCustomertype()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getNamewithinitials()).as("check namewithinitials").isEqualTo(actual.getNamewithinitials()))
            .satisfies(e -> assertThat(e.getFullname()).as("check fullname").isEqualTo(actual.getFullname()))
            .satisfies(e -> assertThat(e.getCallingname()).as("check callingname").isEqualTo(actual.getCallingname()))
            .satisfies(e -> assertThat(e.getNicno()).as("check nicno").isEqualTo(actual.getNicno()))
            .satisfies(e -> assertThat(e.getNicissueddate()).as("check nicissueddate").isEqualTo(actual.getNicissueddate()))
            .satisfies(e -> assertThat(e.getDateofbirth()).as("check dateofbirth").isEqualTo(actual.getDateofbirth()))
            .satisfies(e -> assertThat(e.getBloodgroup()).as("check bloodgroup").isEqualTo(actual.getBloodgroup()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getMaritalstatus()).as("check maritalstatus").isEqualTo(actual.getMaritalstatus()))
            .satisfies(e -> assertThat(e.getMarrieddate()).as("check marrieddate").isEqualTo(actual.getMarrieddate()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getTerritory()).as("check territory").isEqualTo(actual.getTerritory()))
            .satisfies(e -> assertThat(e.getReligion()).as("check religion").isEqualTo(actual.getReligion()))
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getBusinessname()).as("check businessname").isEqualTo(actual.getBusinessname()))
            .satisfies(e -> assertThat(e.getBusinessregdate()).as("check businessregdate").isEqualTo(actual.getBusinessregdate()))
            .satisfies(e -> assertThat(e.getBusinessregno()).as("check businessregno").isEqualTo(actual.getBusinessregno()))
            .satisfies(e -> assertThat(e.getProfilepicturepath()).as("check profilepicturepath").isEqualTo(actual.getProfilepicturepath()))
            .satisfies(e -> assertThat(e.getResidencehouseno()).as("check residencehouseno").isEqualTo(actual.getResidencehouseno()))
            .satisfies(e -> assertThat(e.getResidenceaddress()).as("check residenceaddress").isEqualTo(actual.getResidenceaddress()))
            .satisfies(e -> assertThat(e.getResidencecity()).as("check residencecity").isEqualTo(actual.getResidencecity()))
            .satisfies(e -> assertThat(e.getResidencephone()).as("check residencephone").isEqualTo(actual.getResidencephone()))
            .satisfies(e -> assertThat(e.getBusinesslocationno()).as("check businesslocationno").isEqualTo(actual.getBusinesslocationno()))
            .satisfies(e -> assertThat(e.getBusinessaddress()).as("check businessaddress").isEqualTo(actual.getBusinessaddress()))
            .satisfies(e -> assertThat(e.getBusinesscity()).as("check businesscity").isEqualTo(actual.getBusinesscity()))
            .satisfies(e -> assertThat(e.getBusinessphone1()).as("check businessphone1").isEqualTo(actual.getBusinessphone1()))
            .satisfies(e -> assertThat(e.getBusinessphone2()).as("check businessphone2").isEqualTo(actual.getBusinessphone2()))
            .satisfies(e -> assertThat(e.getBusinessmobile()).as("check businessmobile").isEqualTo(actual.getBusinessmobile()))
            .satisfies(e -> assertThat(e.getBusinessfax()).as("check businessfax").isEqualTo(actual.getBusinessfax()))
            .satisfies(e -> assertThat(e.getBusinessemail()).as("check businessemail").isEqualTo(actual.getBusinessemail()))
            .satisfies(e -> assertThat(e.getBusinessprovinceid()).as("check businessprovinceid").isEqualTo(actual.getBusinessprovinceid()))
            .satisfies(e -> assertThat(e.getBusinessdistrictid()).as("check businessdistrictid").isEqualTo(actual.getBusinessdistrictid()))
            .satisfies(e -> assertThat(e.getContactpersonname()).as("check contactpersonname").isEqualTo(actual.getContactpersonname()))
            .satisfies(e -> assertThat(e.getContactpersonphone()).as("check contactpersonphone").isEqualTo(actual.getContactpersonphone()))
            .satisfies(e ->
                assertThat(e.getContactpersonmobile()).as("check contactpersonmobile").isEqualTo(actual.getContactpersonmobile())
            )
            .satisfies(e -> assertThat(e.getContactpersonemail()).as("check contactpersonemail").isEqualTo(actual.getContactpersonemail()))
            .satisfies(e -> assertThat(e.getRootmappath()).as("check rootmappath").isEqualTo(actual.getRootmappath()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()))
            .satisfies(e -> assertThat(e.getRegistrationdate()).as("check registrationdate").isEqualTo(actual.getRegistrationdate()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getIsinternalcustomer()).as("check isinternalcustomer").isEqualTo(actual.getIsinternalcustomer()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getMaximumdiscount()).as("check maximumdiscount").isEqualTo(actual.getMaximumdiscount()))
            .satisfies(e -> assertThat(e.getCreditlimit()).as("check creditlimit").isEqualTo(actual.getCreditlimit()))
            .satisfies(e -> assertThat(e.getHassecuritydeposit()).as("check hassecuritydeposit").isEqualTo(actual.getHassecuritydeposit()))
            .satisfies(e ->
                assertThat(e.getSecuritydepositamount()).as("check securitydepositamount").isEqualTo(actual.getSecuritydepositamount())
            )
            .satisfies(e -> assertThat(e.getPaybycash()).as("check paybycash").isEqualTo(actual.getPaybycash()))
            .satisfies(e ->
                assertThat(e.getCashpaymentbeforeload()).as("check cashpaymentbeforeload").isEqualTo(actual.getCashpaymentbeforeload())
            )
            .satisfies(e ->
                assertThat(e.getCashlastinvoicebeforeload())
                    .as("check cashlastinvoicebeforeload")
                    .isEqualTo(actual.getCashlastinvoicebeforeload())
            )
            .satisfies(e -> assertThat(e.getPaybycredit()).as("check paybycredit").isEqualTo(actual.getPaybycredit()))
            .satisfies(e -> assertThat(e.getCreditoneweekcheck()).as("check creditoneweekcheck").isEqualTo(actual.getCreditoneweekcheck()))
            .satisfies(e ->
                assertThat(e.getCreditpaymentbydays()).as("check creditpaymentbydays").isEqualTo(actual.getCreditpaymentbydays())
            )
            .satisfies(e ->
                assertThat(e.getHaspurchasingdeposit()).as("check haspurchasingdeposit").isEqualTo(actual.getHaspurchasingdeposit())
            )
            .satisfies(e ->
                assertThat(e.getHassecuritydepositbond()).as("check hassecuritydepositbond").isEqualTo(actual.getHassecuritydepositbond())
            )
            .satisfies(e -> assertThat(e.getHasassestsdeposit()).as("check hasassestsdeposit").isEqualTo(actual.getHasassestsdeposit()))
            .satisfies(e ->
                assertThat(e.getCustomerrootmappath()).as("check customerrootmappath").isEqualTo(actual.getCustomerrootmappath())
            )
            .satisfies(e -> assertThat(e.getEmployername()).as("check employername").isEqualTo(actual.getEmployername()))
            .satisfies(e -> assertThat(e.getEmployeraddress()).as("check employeraddress").isEqualTo(actual.getEmployeraddress()))
            .satisfies(e -> assertThat(e.getEmployerphone()).as("check employerphone").isEqualTo(actual.getEmployerphone()))
            .satisfies(e ->
                assertThat(e.getEmployerdesignation()).as("check employerdesignation").isEqualTo(actual.getEmployerdesignation())
            )
            .satisfies(e ->
                assertThat(e.getPreviousemployername()).as("check previousemployername").isEqualTo(actual.getPreviousemployername())
            )
            .satisfies(e ->
                assertThat(e.getPreviousemployeraddress())
                    .as("check previousemployeraddress")
                    .isEqualTo(actual.getPreviousemployeraddress())
            )
            .satisfies(e -> assertThat(e.getPreviousindustry()).as("check previousindustry").isEqualTo(actual.getPreviousindustry()))
            .satisfies(e -> assertThat(e.getPreviousperiod()).as("check previousperiod").isEqualTo(actual.getPreviousperiod()))
            .satisfies(e -> assertThat(e.getPreviouspositions()).as("check previouspositions").isEqualTo(actual.getPreviouspositions()))
            .satisfies(e ->
                assertThat(e.getPreviousresionforleaving())
                    .as("check previousresionforleaving")
                    .isEqualTo(actual.getPreviousresionforleaving())
            )
            .satisfies(e -> assertThat(e.getHascreaditlimit()).as("check hascreaditlimit").isEqualTo(actual.getHascreaditlimit()))
            .satisfies(e -> assertThat(e.getAccountid()).as("check accountid").isEqualTo(actual.getAccountid()))
            .satisfies(e -> assertThat(e.getAccountcode()).as("check accountcode").isEqualTo(actual.getAccountcode()))
            .satisfies(e -> assertThat(e.getIsregistered()).as("check isregistered").isEqualTo(actual.getIsregistered()))
            .satisfies(e -> assertThat(e.getVatregnumber()).as("check vatregnumber").isEqualTo(actual.getVatregnumber()))
            .satisfies(e -> assertThat(e.getTinnumber()).as("check tinnumber").isEqualTo(actual.getTinnumber()))
            .satisfies(e -> assertThat(e.getLat()).as("check lat").isEqualTo(actual.getLat()))
            .satisfies(e -> assertThat(e.getLon()).as("check lon").isEqualTo(actual.getLon()))
            .satisfies(e -> assertThat(e.getCreditperiod()).as("check creditperiod").isEqualTo(actual.getCreditperiod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerUpdatableRelationshipsEquals(Customer expected, Customer actual) {
        // empty method
    }
}
