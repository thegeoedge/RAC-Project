package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CompanybankaccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanybankaccountAllPropertiesEquals(Companybankaccount expected, Companybankaccount actual) {
        assertCompanybankaccountAutoGeneratedPropertiesEquals(expected, actual);
        assertCompanybankaccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanybankaccountAllUpdatablePropertiesEquals(Companybankaccount expected, Companybankaccount actual) {
        assertCompanybankaccountUpdatableFieldsEquals(expected, actual);
        assertCompanybankaccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanybankaccountAutoGeneratedPropertiesEquals(Companybankaccount expected, Companybankaccount actual) {
        assertThat(expected)
            .as("Verify Companybankaccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanybankaccountUpdatableFieldsEquals(Companybankaccount expected, Companybankaccount actual) {
        assertThat(expected)
            .as("Verify Companybankaccount relevant properties")
            .satisfies(e -> assertThat(e.getCompanyid()).as("check companyid").isEqualTo(actual.getCompanyid()))
            .satisfies(e -> assertThat(e.getAccountnumber()).as("check accountnumber").isEqualTo(actual.getAccountnumber()))
            .satisfies(e -> assertThat(e.getAccountname()).as("check accountname").isEqualTo(actual.getAccountname()))
            .satisfies(e -> assertThat(e.getBankname()).as("check bankname").isEqualTo(actual.getBankname()))
            .satisfies(e -> assertThat(e.getBankid()).as("check bankid").isEqualTo(actual.getBankid()))
            .satisfies(e -> assertThat(e.getBranchname()).as("check branchname").isEqualTo(actual.getBranchname()))
            .satisfies(e -> assertThat(e.getBranchid()).as("check branchid").isEqualTo(actual.getBranchid()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getAccountcode()).as("check accountcode").isEqualTo(actual.getAccountcode()))
            .satisfies(e -> assertThat(e.getAccountid()).as("check accountid").isEqualTo(actual.getAccountid()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getAccounttypeid()).as("check accounttypeid").isEqualTo(actual.getAccounttypeid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanybankaccountUpdatableRelationshipsEquals(Companybankaccount expected, Companybankaccount actual) {}
}
