package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AutocarejobAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarejobAllPropertiesEquals(Autocarejob expected, Autocarejob actual) {
        assertAutocarejobAutoGeneratedPropertiesEquals(expected, actual);
        assertAutocarejobAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarejobAllUpdatablePropertiesEquals(Autocarejob expected, Autocarejob actual) {
        assertAutocarejobUpdatableFieldsEquals(expected, actual);
        assertAutocarejobUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarejobAutoGeneratedPropertiesEquals(Autocarejob expected, Autocarejob actual) {
        assertThat(expected)
            .as("Verify Autocarejob auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarejobUpdatableFieldsEquals(Autocarejob expected, Autocarejob actual) {
        assertThat(expected)
            .as("Verify Autocarejob relevant properties")
            .satisfies(e -> assertThat(e.getJobnumber()).as("check jobnumber").isEqualTo(actual.getJobnumber()))
            .satisfies(e -> assertThat(e.getVehicleid()).as("check vehicleid").isEqualTo(actual.getVehicleid()))
            .satisfies(e -> assertThat(e.getVehiclenumber()).as("check vehiclenumber").isEqualTo(actual.getVehiclenumber()))
            .satisfies(e -> assertThat(e.getMillage()).as("check millage").isEqualTo(actual.getMillage()))
            .satisfies(e -> assertThat(e.getNextmillage()).as("check nextmillage").isEqualTo(actual.getNextmillage()))
            .satisfies(e -> assertThat(e.getNextservicedate()).as("check nextservicedate").isEqualTo(actual.getNextservicedate()))
            .satisfies(e -> assertThat(e.getVehicletypeid()).as("check vehicletypeid").isEqualTo(actual.getVehicletypeid()))
            .satisfies(e -> assertThat(e.getJobtypeid()).as("check jobtypeid").isEqualTo(actual.getJobtypeid()))
            .satisfies(e -> assertThat(e.getJobtypename()).as("check jobtypename").isEqualTo(actual.getJobtypename()))
            .satisfies(e -> assertThat(e.getJobopenby()).as("check jobopenby").isEqualTo(actual.getJobopenby()))
            .satisfies(e -> assertThat(e.getJobopentime()).as("check jobopentime").isEqualTo(actual.getJobopentime()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getSpecialrquirments()).as("check specialrquirments").isEqualTo(actual.getSpecialrquirments()))
            .satisfies(
                e -> assertThat(e.getSpecialinstructions()).as("check specialinstructions").isEqualTo(actual.getSpecialinstructions())
            )
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(
                e ->
                    assertThat(e.getNextserviceinstructions())
                        .as("check nextserviceinstructions")
                        .isEqualTo(actual.getNextserviceinstructions())
            )
            .satisfies(
                e ->
                    assertThat(e.getLastserviceinstructions())
                        .as("check lastserviceinstructions")
                        .isEqualTo(actual.getLastserviceinstructions())
            )
            .satisfies(e -> assertThat(e.getIsadvisorchecked()).as("check isadvisorchecked").isEqualTo(actual.getIsadvisorchecked()))
            .satisfies(e -> assertThat(e.getIsempallocated()).as("check isempallocated").isEqualTo(actual.getIsempallocated()))
            .satisfies(e -> assertThat(e.getJobclosetime()).as("check jobclosetime").isEqualTo(actual.getJobclosetime()))
            .satisfies(e -> assertThat(e.getIsjobclose()).as("check isjobclose").isEqualTo(actual.getIsjobclose()))
            .satisfies(e -> assertThat(e.getIsfeedback()).as("check isfeedback").isEqualTo(actual.getIsfeedback()))
            .satisfies(e -> assertThat(e.getFeedbackstatusid()).as("check feedbackstatusid").isEqualTo(actual.getFeedbackstatusid()))
            .satisfies(e -> assertThat(e.getCustomername()).as("check customername").isEqualTo(actual.getCustomername()))
            .satisfies(e -> assertThat(e.getCustomertel()).as("check customertel").isEqualTo(actual.getCustomertel()))
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getAdvisorfinalcheck()).as("check advisorfinalcheck").isEqualTo(actual.getAdvisorfinalcheck()))
            .satisfies(e -> assertThat(e.getJobdate()).as("check jobdate").isEqualTo(actual.getJobdate()))
            .satisfies(e -> assertThat(e.getIscompanyservice()).as("check iscompanyservice").isEqualTo(actual.getIscompanyservice()))
            .satisfies(e -> assertThat(e.getFreeservicenumber()).as("check freeservicenumber").isEqualTo(actual.getFreeservicenumber()))
            .satisfies(e -> assertThat(e.getCompanyid()).as("check companyid").isEqualTo(actual.getCompanyid()))
            .satisfies(e -> assertThat(e.getUpdatetocustomer()).as("check updatetocustomer").isEqualTo(actual.getUpdatetocustomer()))
            .satisfies(e -> assertThat(e.getNextgearoilmilage()).as("check nextgearoilmilage").isEqualTo(actual.getNextgearoilmilage()))
            .satisfies(e -> assertThat(e.getIsjobinvoiced()).as("check isjobinvoiced").isEqualTo(actual.getIsjobinvoiced()))
            .satisfies(e -> assertThat(e.getIswaiting()).as("check iswaiting").isEqualTo(actual.getIswaiting()))
            .satisfies(e -> assertThat(e.getIscustomercomment()).as("check iscustomercomment").isEqualTo(actual.getIscustomercomment()))
            .satisfies(e -> assertThat(e.getImagefolder()).as("check imagefolder").isEqualTo(actual.getImagefolder()))
            .satisfies(e -> assertThat(e.getFrontimage()).as("check frontimage").isEqualTo(actual.getFrontimage()))
            .satisfies(e -> assertThat(e.getLeftimage()).as("check leftimage").isEqualTo(actual.getLeftimage()))
            .satisfies(e -> assertThat(e.getRightimage()).as("check rightimage").isEqualTo(actual.getRightimage()))
            .satisfies(e -> assertThat(e.getBackimage()).as("check backimage").isEqualTo(actual.getBackimage()))
            .satisfies(e -> assertThat(e.getDashboardimage()).as("check dashboardimage").isEqualTo(actual.getDashboardimage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarejobUpdatableRelationshipsEquals(Autocarejob expected, Autocarejob actual) {}
}
