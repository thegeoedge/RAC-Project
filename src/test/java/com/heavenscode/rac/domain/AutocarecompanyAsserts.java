package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AutocarecompanyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarecompanyAllPropertiesEquals(Autocarecompany expected, Autocarecompany actual) {
        assertAutocarecompanyAutoGeneratedPropertiesEquals(expected, actual);
        assertAutocarecompanyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarecompanyAllUpdatablePropertiesEquals(Autocarecompany expected, Autocarecompany actual) {
        assertAutocarecompanyUpdatableFieldsEquals(expected, actual);
        assertAutocarecompanyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarecompanyAutoGeneratedPropertiesEquals(Autocarecompany expected, Autocarecompany actual) {
        assertThat(expected)
            .as("Verify Autocarecompany auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarecompanyUpdatableFieldsEquals(Autocarecompany expected, Autocarecompany actual) {
        assertThat(expected)
            .as("Verify Autocarecompany relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getServicephone()).as("check servicephone").isEqualTo(actual.getServicephone()))
            .satisfies(e -> assertThat(e.getSparepartphone()).as("check sparepartphone").isEqualTo(actual.getSparepartphone()))
            .satisfies(e -> assertThat(e.getBodypaint()).as("check bodypaint").isEqualTo(actual.getBodypaint()))
            .satisfies(e -> assertThat(e.getGeneralphone()).as("check generalphone").isEqualTo(actual.getGeneralphone()))
            .satisfies(e -> assertThat(e.getFax()).as("check fax").isEqualTo(actual.getFax()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getVatregnumber()).as("check vatregnumber").isEqualTo(actual.getVatregnumber()))
            .satisfies(e -> assertThat(e.getTinnumber()).as("check tinnumber").isEqualTo(actual.getTinnumber()))
            .satisfies(e -> assertThat(e.getAccountcode()).as("check accountcode").isEqualTo(actual.getAccountcode()))
            .satisfies(e -> assertThat(e.getAccountid()).as("check accountid").isEqualTo(actual.getAccountid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutocarecompanyUpdatableRelationshipsEquals(Autocarecompany expected, Autocarecompany actual) {}
}
