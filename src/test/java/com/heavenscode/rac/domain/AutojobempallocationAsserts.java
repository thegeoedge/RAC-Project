package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AutojobempallocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutojobempallocationAllPropertiesEquals(Autojobempallocation expected, Autojobempallocation actual) {
        assertAutojobempallocationAutoGeneratedPropertiesEquals(expected, actual);
        assertAutojobempallocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutojobempallocationAllUpdatablePropertiesEquals(Autojobempallocation expected, Autojobempallocation actual) {
        assertAutojobempallocationUpdatableFieldsEquals(expected, actual);
        assertAutojobempallocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutojobempallocationAutoGeneratedPropertiesEquals(Autojobempallocation expected, Autojobempallocation actual) {
        assertThat(expected)
            .as("Verify Autojobempallocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutojobempallocationUpdatableFieldsEquals(Autojobempallocation expected, Autojobempallocation actual) {
        assertThat(expected)
            .as("Verify Autojobempallocation relevant properties")
            .satisfies(e -> assertThat(e.getJobid()).as("check jobid").isEqualTo(actual.getJobid()))
            .satisfies(e -> assertThat(e.getCategoryid()).as("check categoryid").isEqualTo(actual.getCategoryid()))
            .satisfies(e -> assertThat(e.getEmpposition()).as("check empposition").isEqualTo(actual.getEmpposition()))
            .satisfies(e -> assertThat(e.getEmpid()).as("check empid").isEqualTo(actual.getEmpid()))
            .satisfies(e -> assertThat(e.getEmpname()).as("check empname").isEqualTo(actual.getEmpname()))
            .satisfies(e -> assertThat(e.getAllocatetime()).as("check allocatetime").isEqualTo(actual.getAllocatetime()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getJobdate()).as("check jobdate").isEqualTo(actual.getJobdate()))
            .satisfies(e -> assertThat(e.getCommission()).as("check commission").isEqualTo(actual.getCommission()))
            .satisfies(e -> assertThat(e.getIscommissionpaid()).as("check iscommissionpaid").isEqualTo(actual.getIscommissionpaid()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutojobempallocationUpdatableRelationshipsEquals(Autojobempallocation expected, Autojobempallocation actual) {}
}
