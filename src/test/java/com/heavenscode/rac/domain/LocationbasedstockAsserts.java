package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocationbasedstockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationbasedstockAllPropertiesEquals(Locationbasedstock expected, Locationbasedstock actual) {
        assertLocationbasedstockAutoGeneratedPropertiesEquals(expected, actual);
        assertLocationbasedstockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationbasedstockAllUpdatablePropertiesEquals(Locationbasedstock expected, Locationbasedstock actual) {
        assertLocationbasedstockUpdatableFieldsEquals(expected, actual);
        assertLocationbasedstockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationbasedstockAutoGeneratedPropertiesEquals(Locationbasedstock expected, Locationbasedstock actual) {
        assertThat(expected)
            .as("Verify Locationbasedstock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationbasedstockUpdatableFieldsEquals(Locationbasedstock expected, Locationbasedstock actual) {
        assertThat(expected)
            .as("Verify Locationbasedstock relevant properties")
            .satisfies(e -> assertThat(e.getItemid()).as("check itemid").isEqualTo(actual.getItemid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getLocationid()).as("check locationid").isEqualTo(actual.getLocationid()))
            .satisfies(e -> assertThat(e.getLocationcode()).as("check locationcode").isEqualTo(actual.getLocationcode()))
            .satisfies(e -> assertThat(e.getAvailablequantity()).as("check availablequantity").isEqualTo(actual.getAvailablequantity()))
            .satisfies(e -> assertThat(e.getHasbatches()).as("check hasbatches").isEqualTo(actual.getHasbatches()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationbasedstockUpdatableRelationshipsEquals(Locationbasedstock expected, Locationbasedstock actual) {}
}
