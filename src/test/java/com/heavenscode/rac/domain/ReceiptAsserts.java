package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReceiptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptAllPropertiesEquals(Receipt expected, Receipt actual) {
        assertReceiptAutoGeneratedPropertiesEquals(expected, actual);
        assertReceiptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptAllUpdatablePropertiesEquals(Receipt expected, Receipt actual) {
        assertReceiptUpdatableFieldsEquals(expected, actual);
        assertReceiptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptAutoGeneratedPropertiesEquals(Receipt expected, Receipt actual) {
        assertThat(expected)
            .as("Verify Receipt auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptUpdatableFieldsEquals(Receipt expected, Receipt actual) {
        assertThat(expected)
            .as("Verify Receipt relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getReceiptdate()).as("check receiptdate").isEqualTo(actual.getReceiptdate()))
            .satisfies(e -> assertThat(e.getCustomername()).as("check customername").isEqualTo(actual.getCustomername()))
            .satisfies(e -> assertThat(e.getCustomeraddress()).as("check customeraddress").isEqualTo(actual.getCustomeraddress()))
            .satisfies(e -> assertThat(e.getTotalamount()).as("check totalamount").isEqualTo(actual.getTotalamount()))
            .satisfies(e -> assertThat(e.getTotalamountinword()).as("check totalamountinword").isEqualTo(actual.getTotalamountinword()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getTermid()).as("check termid").isEqualTo(actual.getTermid()))
            .satisfies(e -> assertThat(e.getTerm()).as("check term").isEqualTo(actual.getTerm()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCheckdate()).as("check checkdate").isEqualTo(actual.getCheckdate()))
            .satisfies(e -> assertThat(e.getCheckno()).as("check checkno").isEqualTo(actual.getCheckno()))
            .satisfies(e -> assertThat(e.getBank()).as("check bank").isEqualTo(actual.getBank()))
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getDeposited()).as("check deposited").isEqualTo(actual.getDeposited()))
            .satisfies(e -> assertThat(e.getCreatedby()).as("check createdby").isEqualTo(actual.getCreatedby()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptUpdatableRelationshipsEquals(Receipt expected, Receipt actual) {}
}
