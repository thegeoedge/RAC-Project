package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomervehicleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomervehicleAllPropertiesEquals(Customervehicle expected, Customervehicle actual) {
        assertCustomervehicleAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomervehicleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomervehicleAllUpdatablePropertiesEquals(Customervehicle expected, Customervehicle actual) {
        assertCustomervehicleUpdatableFieldsEquals(expected, actual);
        assertCustomervehicleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomervehicleAutoGeneratedPropertiesEquals(Customervehicle expected, Customervehicle actual) {
        assertThat(expected)
            .as("Verify Customervehicle auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomervehicleUpdatableFieldsEquals(Customervehicle expected, Customervehicle actual) {
        assertThat(expected)
            .as("Verify Customervehicle relevant properties")
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getVehiclenumber()).as("check vehiclenumber").isEqualTo(actual.getVehiclenumber()))
            .satisfies(e -> assertThat(e.getCategoryid()).as("check categoryid").isEqualTo(actual.getCategoryid()))
            .satisfies(e -> assertThat(e.getCategoryname()).as("check categoryname").isEqualTo(actual.getCategoryname()))
            .satisfies(e -> assertThat(e.getTypeid()).as("check typeid").isEqualTo(actual.getTypeid()))
            .satisfies(e -> assertThat(e.getTypename()).as("check typename").isEqualTo(actual.getTypename()))
            .satisfies(e -> assertThat(e.getMakeid()).as("check makeid").isEqualTo(actual.getMakeid()))
            .satisfies(e -> assertThat(e.getMakename()).as("check makename").isEqualTo(actual.getMakename()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getYom()).as("check yom").isEqualTo(actual.getYom()))
            .satisfies(e -> assertThat(e.getCustomercode()).as("check customercode").isEqualTo(actual.getCustomercode()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getServicecount()).as("check servicecount").isEqualTo(actual.getServicecount()))
            .satisfies(e -> assertThat(e.getEngNo()).as("check engNo").isEqualTo(actual.getEngNo()))
            .satisfies(e -> assertThat(e.getChaNo()).as("check chaNo").isEqualTo(actual.getChaNo()))
            .satisfies(e -> assertThat(e.getMilage()).as("check milage").isEqualTo(actual.getMilage()))
            .satisfies(e -> assertThat(e.getLastservicedate()).as("check lastservicedate").isEqualTo(actual.getLastservicedate()))
            .satisfies(e -> assertThat(e.getNextservicedate()).as("check nextservicedate").isEqualTo(actual.getNextservicedate()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getNextgearoilmilage()).as("check nextgearoilmilage").isEqualTo(actual.getNextgearoilmilage()))
            .satisfies(e -> assertThat(e.getNextmilage()).as("check nextmilage").isEqualTo(actual.getNextmilage()))
            .satisfies(e -> assertThat(e.getServiceperiod()).as("check serviceperiod").isEqualTo(actual.getServiceperiod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomervehicleUpdatableRelationshipsEquals(Customervehicle expected, Customervehicle actual) {
        // empty method
    }
}
