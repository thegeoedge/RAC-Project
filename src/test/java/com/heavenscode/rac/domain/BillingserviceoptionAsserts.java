package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BillingserviceoptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingserviceoptionAllPropertiesEquals(Billingserviceoption expected, Billingserviceoption actual) {
        assertBillingserviceoptionAutoGeneratedPropertiesEquals(expected, actual);
        assertBillingserviceoptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingserviceoptionAllUpdatablePropertiesEquals(Billingserviceoption expected, Billingserviceoption actual) {
        assertBillingserviceoptionUpdatableFieldsEquals(expected, actual);
        assertBillingserviceoptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingserviceoptionAutoGeneratedPropertiesEquals(Billingserviceoption expected, Billingserviceoption actual) {
        assertThat(expected)
            .as("Verify Billingserviceoption auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingserviceoptionUpdatableFieldsEquals(Billingserviceoption expected, Billingserviceoption actual) {
        assertThat(expected)
            .as("Verify Billingserviceoption relevant properties")
            .satisfies(e -> assertThat(e.getServicename()).as("check servicename").isEqualTo(actual.getServicename()))
            .satisfies(e -> assertThat(e.getServicediscription()).as("check servicediscription").isEqualTo(actual.getServicediscription()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getOrderby()).as("check orderby").isEqualTo(actual.getOrderby()))
            .satisfies(e -> assertThat(e.getBilltocustomer()).as("check billtocustomer").isEqualTo(actual.getBilltocustomer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingserviceoptionUpdatableRelationshipsEquals(Billingserviceoption expected, Billingserviceoption actual) {}
}
