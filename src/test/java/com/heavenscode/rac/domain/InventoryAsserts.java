package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InventoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllPropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllUpdatablePropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryUpdatableFieldsEquals(expected, actual);
        assertInventoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAutoGeneratedPropertiesEquals(Inventory expected, Inventory actual) {
        assertThat(expected)
            .as("Verify Inventory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableFieldsEquals(Inventory expected, Inventory actual) {
        assertThat(expected)
            .as("Verify Inventory relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getPartnumber()).as("check partnumber").isEqualTo(actual.getPartnumber()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getClassification1()).as("check classification1").isEqualTo(actual.getClassification1()))
            .satisfies(e -> assertThat(e.getClassification2()).as("check classification2").isEqualTo(actual.getClassification2()))
            .satisfies(e -> assertThat(e.getClassification3()).as("check classification3").isEqualTo(actual.getClassification3()))
            .satisfies(e -> assertThat(e.getClassification4()).as("check classification4").isEqualTo(actual.getClassification4()))
            .satisfies(e -> assertThat(e.getClassification5()).as("check classification5").isEqualTo(actual.getClassification5()))
            .satisfies(e -> assertThat(e.getUnitofmeasurement()).as("check unitofmeasurement").isEqualTo(actual.getUnitofmeasurement()))
            .satisfies(e -> assertThat(e.getDecimalplaces()).as("check decimalplaces").isEqualTo(actual.getDecimalplaces()))
            .satisfies(e -> assertThat(e.getIsassemblyunit()).as("check isassemblyunit").isEqualTo(actual.getIsassemblyunit()))
            .satisfies(e -> assertThat(e.getAssemblyunitof()).as("check assemblyunitof").isEqualTo(actual.getAssemblyunitof()))
            .satisfies(e -> assertThat(e.getReorderlevel()).as("check reorderlevel").isEqualTo(actual.getReorderlevel()))
            .satisfies(e -> assertThat(e.getLastcost()).as("check lastcost").isEqualTo(actual.getLastcost()))
            .satisfies(e -> assertThat(e.getLastsellingprice()).as("check lastsellingprice").isEqualTo(actual.getLastsellingprice()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getAvailablequantity()).as("check availablequantity").isEqualTo(actual.getAvailablequantity()))
            .satisfies(e -> assertThat(e.getHasbatches()).as("check hasbatches").isEqualTo(actual.getHasbatches()))
            .satisfies(e -> assertThat(e.getItemspecfilepath()).as("check itemspecfilepath").isEqualTo(actual.getItemspecfilepath()))
            .satisfies(e -> assertThat(e.getItemimagepath()).as("check itemimagepath").isEqualTo(actual.getItemimagepath()))
            .satisfies(e -> assertThat(e.getReturnprice()).as("check returnprice").isEqualTo(actual.getReturnprice()))
            .satisfies(e -> assertThat(e.getActiveitem()).as("check activeitem").isEqualTo(actual.getActiveitem()))
            .satisfies(e -> assertThat(e.getMinstock()).as("check minstock").isEqualTo(actual.getMinstock()))
            .satisfies(e -> assertThat(e.getMaxstock()).as("check maxstock").isEqualTo(actual.getMaxstock()))
            .satisfies(e -> assertThat(e.getDailyaverage()).as("check dailyaverage").isEqualTo(actual.getDailyaverage()))
            .satisfies(e -> assertThat(e.getBufferlevel()).as("check bufferlevel").isEqualTo(actual.getBufferlevel()))
            .satisfies(e -> assertThat(e.getLeadtime()).as("check leadtime").isEqualTo(actual.getLeadtime()))
            .satisfies(e -> assertThat(e.getBuffertime()).as("check buffertime").isEqualTo(actual.getBuffertime()))
            .satisfies(e -> assertThat(e.getSaftydays()).as("check saftydays").isEqualTo(actual.getSaftydays()))
            .satisfies(e -> assertThat(e.getAccountcode()).as("check accountcode").isEqualTo(actual.getAccountcode()))
            .satisfies(e -> assertThat(e.getAccountid()).as("check accountid").isEqualTo(actual.getAccountid()))
            .satisfies(e -> assertThat(e.getCasepackqty()).as("check casepackqty").isEqualTo(actual.getCasepackqty()))
            .satisfies(e -> assertThat(e.getIsregistered()).as("check isregistered").isEqualTo(actual.getIsregistered()))
            .satisfies(
                e ->
                    assertThat(e.getDefaultstocklocationid())
                        .as("check defaultstocklocationid")
                        .isEqualTo(actual.getDefaultstocklocationid())
            )
            .satisfies(e -> assertThat(e.getRackno()).as("check rackno").isEqualTo(actual.getRackno()))
            .satisfies(e -> assertThat(e.getBarcodeimage()).as("check barcodeimage").isEqualTo(actual.getBarcodeimage()))
            .satisfies(
                e ->
                    assertThat(e.getBarcodeimageContentType())
                        .as("check barcodeimage contenty type")
                        .isEqualTo(actual.getBarcodeimageContentType())
            )
            .satisfies(e -> assertThat(e.getCommissionempid()).as("check commissionempid").isEqualTo(actual.getCommissionempid()))
            .satisfies(e -> assertThat(e.getChecktypeid()).as("check checktypeid").isEqualTo(actual.getChecktypeid()))
            .satisfies(e -> assertThat(e.getChecktype()).as("check checktype").isEqualTo(actual.getChecktype()))
            .satisfies(e -> assertThat(e.getReorderqty()).as("check reorderqty").isEqualTo(actual.getReorderqty()))
            .satisfies(e -> assertThat(e.getNotininvoice()).as("check notininvoice").isEqualTo(actual.getNotininvoice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableRelationshipsEquals(Inventory expected, Inventory actual) {}
}
