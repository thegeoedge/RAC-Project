package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmpJobcommissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpJobcommissionAllPropertiesEquals(EmpJobcommission expected, EmpJobcommission actual) {
        assertEmpJobcommissionAutoGeneratedPropertiesEquals(expected, actual);
        assertEmpJobcommissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpJobcommissionAllUpdatablePropertiesEquals(EmpJobcommission expected, EmpJobcommission actual) {
        assertEmpJobcommissionUpdatableFieldsEquals(expected, actual);
        assertEmpJobcommissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpJobcommissionAutoGeneratedPropertiesEquals(EmpJobcommission expected, EmpJobcommission actual) {
        assertThat(expected)
            .as("Verify EmpJobcommission auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpJobcommissionUpdatableFieldsEquals(EmpJobcommission expected, EmpJobcommission actual) {
        assertThat(expected)
            .as("Verify EmpJobcommission relevant properties")
            .satisfies(e -> assertThat(e.getVehcatid()).as("check vehcatid").isEqualTo(actual.getVehcatid()))
            .satisfies(e -> assertThat(e.getAutojobcatid()).as("check autojobcatid").isEqualTo(actual.getAutojobcatid()))
            .satisfies(e -> assertThat(e.getFirstcom()).as("check firstcom").isEqualTo(actual.getFirstcom()))
            .satisfies(e -> assertThat(e.getSecondcom()).as("check secondcom").isEqualTo(actual.getSecondcom()))
            .satisfies(e -> assertThat(e.getThirdcom()).as("check thirdcom").isEqualTo(actual.getThirdcom()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpJobcommissionUpdatableRelationshipsEquals(EmpJobcommission expected, EmpJobcommission actual) {}
}
