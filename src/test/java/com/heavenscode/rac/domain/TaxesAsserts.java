package com.heavenscode.rac.domain;

import static com.heavenscode.rac.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TaxesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxesAllPropertiesEquals(Taxes expected, Taxes actual) {
        assertTaxesAutoGeneratedPropertiesEquals(expected, actual);
        assertTaxesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxesAllUpdatablePropertiesEquals(Taxes expected, Taxes actual) {
        assertTaxesUpdatableFieldsEquals(expected, actual);
        assertTaxesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxesAutoGeneratedPropertiesEquals(Taxes expected, Taxes actual) {
        assertThat(expected)
            .as("Verify Taxes auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxesUpdatableFieldsEquals(Taxes expected, Taxes actual) {
        assertThat(expected)
            .as("Verify Taxes relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getEffectivefrom()).as("check effectivefrom").isEqualTo(actual.getEffectivefrom()))
            .satisfies(e -> assertThat(e.getEffectiveto()).as("check effectiveto").isEqualTo(actual.getEffectiveto()))
            .satisfies(
                e ->
                    assertThat(e.getPercentage())
                        .as("check percentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentage())
            )
            .satisfies(e -> assertThat(e.getFixedamount()).as("check fixedamount").isEqualTo(actual.getFixedamount()))
            .satisfies(e -> assertThat(e.getIsmanual()).as("check ismanual").isEqualTo(actual.getIsmanual()))
            .satisfies(e -> assertThat(e.getIsactive()).as("check isactive").isEqualTo(actual.getIsactive()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxesUpdatableRelationshipsEquals(Taxes expected, Taxes actual) {}
}
