package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StocklocationsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStocklocationsAllPropertiesEquals(Stocklocations expected, Stocklocations actual) {
        assertStocklocationsAutoGeneratedPropertiesEquals(expected, actual);
        assertStocklocationsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStocklocationsAllUpdatablePropertiesEquals(Stocklocations expected, Stocklocations actual) {
        assertStocklocationsUpdatableFieldsEquals(expected, actual);
        assertStocklocationsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStocklocationsAutoGeneratedPropertiesEquals(Stocklocations expected, Stocklocations actual) {
        assertThat(expected)
            .as("Verify Stocklocations auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStocklocationsUpdatableFieldsEquals(Stocklocations expected, Stocklocations actual) {
        assertThat(expected)
            .as("Verify Stocklocations relevant properties")
            .satisfies(e -> assertThat(e.getLocationname()).as("check locationname").isEqualTo(actual.getLocationname()))
            .satisfies(e -> assertThat(e.getLocationcode()).as("check locationcode").isEqualTo(actual.getLocationcode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStocklocationsUpdatableRelationshipsEquals(Stocklocations expected, Stocklocations actual) {}
}
