package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccountsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllPropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllUpdatablePropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsUpdatableFieldsEquals(expected, actual);
        assertAccountsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAutoGeneratedPropertiesEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableFieldsEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getBalance()).as("check balance").isEqualTo(actual.getBalance()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getHasbatches()).as("check hasbatches").isEqualTo(actual.getHasbatches()))
            .satisfies(e -> assertThat(e.getAccountvalue()).as("check accountvalue").isEqualTo(actual.getAccountvalue()))
            .satisfies(e -> assertThat(e.getAccountlevel()).as("check accountlevel").isEqualTo(actual.getAccountlevel()))
            .satisfies(
                e ->
                    assertThat(e.getAccountsnumberingsystem())
                        .as("check accountsnumberingsystem")
                        .isEqualTo(actual.getAccountsnumberingsystem())
            )
            .satisfies(e -> assertThat(e.getSubparentid()).as("check subparentid").isEqualTo(actual.getSubparentid()))
            .satisfies(e -> assertThat(e.getCanedit()).as("check canedit").isEqualTo(actual.getCanedit()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCreditamount()).as("check creditamount").isEqualTo(actual.getCreditamount()))
            .satisfies(e -> assertThat(e.getDebitamount()).as("check debitamount").isEqualTo(actual.getDebitamount()))
            .satisfies(e -> assertThat(e.getDebitorcredit()).as("check debitorcredit").isEqualTo(actual.getDebitorcredit()))
            .satisfies(e -> assertThat(e.getReporttype()).as("check reporttype").isEqualTo(actual.getReporttype()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableRelationshipsEquals(Accounts expected, Accounts actual) {}
}
